# FACT System Secrets Template
# NOTE: This file contains template secrets. In production, use proper secret management
# tools like Kubernetes secrets, HashiCorp Vault, or cloud provider secret managers.

apiVersion: v1
kind: Secret
metadata:
  name: fact-secrets
  namespace: fact-system
  labels:
    app: fact
    component: secrets
type: Opaque
data:
  # API Keys (base64 encoded - replace with actual values)
  # Use: echo -n "your_api_key" | base64
  ANTHROPIC_API_KEY: eW91cl9hbnRocm9waWNfYXBpX2tleV9oZXJl # your_anthropic_api_key_here
  ARCADE_API_KEY: eW91cl9hcmNhZGVfYXBpX2tleV9oZXJl # your_arcade_api_key_here
  
  # OAuth Configuration
  OAUTH_CLIENT_SECRET: eW91cl9vYXV0aF9jbGllbnRfc2VjcmV0X2hlcmU= # your_oauth_client_secret_here
  
  # Database Passwords
  POSTGRES_PASSWORD: ZmFjdF9wcm9kX3Bhc3N3b3Jk # fact_prod_password
  REDIS_PASSWORD: cmVkaXNfcHJvZF9wYXNzd29yZA== # redis_prod_password
  
  # Encryption Keys (generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
  ENCRYPTION_KEY: Z0ZPVkVWRVJfUkVQTEFDRV9USElTX1dJVEhfUkVBTF9LRVk= # FOREVER_REPLACE_THIS_WITH_REAL_KEY
  CACHE_ENCRYPTION_KEY: Z0ZPVkVWRVJfUkVQTEFDRV9USElTX1dJVEhfUkVBTF9LRVk= # FOREVER_REPLACE_THIS_WITH_REAL_KEY
  
  # Session Secret
  SESSION_SECRET: eW91cl9zZXNzaW9uX3NlY3JldF9oZXJl # your_session_secret_here
  
  # JWT Secret
  JWT_SECRET: eW91cl9qd3Rfc2VjcmV0X2hlcmU= # your_jwt_secret_here
  
  # Monitoring Passwords
  GRAFANA_PASSWORD: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA== # grafana_admin_password
---
# TLS Certificate Secret
apiVersion: v1
kind: Secret
metadata:
  name: fact-tls-secret
  namespace: fact-system
  labels:
    app: fact
    component: tls
type: kubernetes.io/tls
data:
  # Replace with actual certificate and key
  # Use: base64 -w 0 /path/to/cert.pem
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t... # Base64 encoded certificate
  # Use: base64 -w 0 /path/to/key.pem
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t... # Base64 encoded private key
---
# Docker Registry Secret (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: fact-registry-secret
  namespace: fact-system
  labels:
    app: fact
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Replace with actual registry credentials
  # Use: kubectl create secret docker-registry fact-registry-secret --docker-server=your-registry-server --docker-username=your-name --docker-password=your-pword --docker-email=your-email --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6eyJ5b3VyLXJlZ2lzdHJ5LXNlcnZlciI6eyJ1c2VybmFtZSI6InlvdXItbmFtZSIsInBhc3N3b3JkIjoieW91ci1wd29yZCIsImVtYWlsIjoieW91ci1lbWFpbCIsImF1dGgiOiJlVzUxY2kxdVlXMWxPbmx2ZFhJdGNIZHZjbVE9In19fQ==
---
# Service Account for FACT application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fact-service-account
  namespace: fact-system
  labels:
    app: fact
    component: serviceaccount
imagePullSecrets:
- name: fact-registry-secret
---
# Role for FACT application
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: fact-role
  namespace: fact-system
  labels:
    app: fact
    component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
# Role Binding for FACT application
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fact-role-binding
  namespace: fact-system
  labels:
    app: fact
    component: rbac
subjects:
- kind: ServiceAccount
  name: fact-service-account
  namespace: fact-system
roleRef:
  kind: Role
  name: fact-role
  apiGroup: rbac.authorization.k8s.io